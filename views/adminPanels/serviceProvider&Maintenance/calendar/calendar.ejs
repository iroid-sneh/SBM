<style>
    /* Optional: Smooth scroll and selection effects */
    #calendar-grid div:hover {
        background-color: #dce9f9;
    }
</style>

<div class="bg-[#f7f6f5] rounded-[100px] flex-1 justify-center items-center">
    <!-- Breadcrumb -->
    <div class="flex p-8 ml-10 items-center space-x-4">
        <h3 class="text-gray-600 text-lg">Calendar</h3>
        <div class="w-px h-7 bg-gray-300"></div>
        <svg
            width="17"
            height="16"
            viewBox="0 0 17 16"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
        >
            <path
                d="M14.1092 2.25781H12.6953V3.1404C12.6965 3.21679 12.6675 3.29056 12.6146 3.34566C12.5617 3.40076 12.4891 3.43273 12.4127 3.4346H11.849C11.7726 3.43273 11.7001 3.40076 11.6471 3.34566C11.5942 3.29056 11.5652 3.21679 11.5664 3.1404V2.25781H4.77594V3.1404C4.77716 3.21679 4.74816 3.29056 4.69524 3.34566C4.64232 3.40076 4.56978 3.43273 4.49341 3.4346H3.9277C3.85133 3.43273 3.77878 3.40076 3.72587 3.34566C3.67295 3.29056 3.64395 3.21679 3.64516 3.1404V2.25781H2.23056C1.84842 2.26666 1.48528 2.42629 1.22038 2.70186C0.95549 2.97744 0.810339 3.3466 0.816601 3.7288V13.7295C0.810339 14.1117 0.95549 14.4809 1.22038 14.7565C1.48528 15.0321 1.84842 15.1917 2.23056 15.2005H14.1092C14.4914 15.1917 14.8545 15.0321 15.1194 14.7565C15.3843 14.4809 15.5295 14.1117 15.5232 13.7295V3.7288C15.5295 3.3466 15.3843 2.97744 15.1194 2.70186C14.8545 2.42629 14.4914 2.26666 14.1092 2.25781ZM14.3918 13.2882C14.3949 13.4793 14.3223 13.6639 14.1899 13.8017C14.0574 13.9395 13.8759 14.0193 13.6848 14.0237H2.65501C2.46393 14.0193 2.28237 13.9395 2.14992 13.8017C2.01747 13.6639 1.9449 13.4793 1.94803 13.2882V6.67011C1.94681 6.59373 1.97581 6.51996 2.02873 6.46485C2.08165 6.40975 2.15419 6.37779 2.23056 6.37592H14.1092C14.1856 6.37779 14.2581 6.40975 14.3111 6.46485C14.364 6.51996 14.393 6.59373 14.3918 6.67011V13.2882Z"
                fill="#163F75"
            />
            <path
                d="M5.03615 1.16496C5.03581 1.06848 4.99733 0.976048 4.9291 0.907825C4.86088 0.839602 4.76845 0.801123 4.67197 0.800781H3.94295C3.84636 0.800952 3.75376 0.839355 3.6854 0.907597C3.61704 0.975839 3.57847 1.06837 3.57812 1.16496V2.25816H5.03615V1.16496Z"
                fill="#163F75"
            />
            <path
                d="M12.7621 1.16496C12.7617 1.06848 12.7232 0.976048 12.655 0.907825C12.5868 0.839602 12.4944 0.801123 12.3979 0.800781H11.6689C11.5723 0.801124 11.4797 0.839692 11.4115 0.908055C11.3433 0.976418 11.3049 1.06902 11.3047 1.16561V2.25816H12.7621V1.16496Z"
                fill="#163F75"
            />
        </svg>
        <svg width="24" height="16" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path
                d="M5.668 3.335L10.335 8 5.668 12.668M13.668 3.335L18.335 8 13.668 12.668"
                stroke="black"
                stroke-width="1.2"
                stroke-linecap="round"
                stroke-linejoin="round"
            />
        </svg>
        <h3 class="text-black text-lg">Date</h3>
        <svg
            id="time-svg"
            width="24"
            height="16"
            class="rotate-[180deg] hidden"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
        >
            <path
                d="M5.668 3.335L10.335 8 5.668 12.668M13.668 3.335L18.335 8 13.668 12.668"
                stroke="black"
                stroke-width="1.2"
                stroke-linecap="round"
                stroke-linejoin="round"
            />
        </svg>
        <h3 id="time-header" class="text-[#163F75] text-lg hidden">Time</h3>
        <div>
            <button
                id="back-button"
                class="bg-red-500 hover:bg-red-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors hidden"
                onclick="goBackToCalendar()"
            >
                Back
            </button>
        </div>
    </div>

    <!-- Main Calendar Content -->
    <div class="bg-white rounded-2xl flex w-[1280px] mx-auto shadow-lg mb-8">
        <!-- Left: Upcoming Events -->
        <div class="w-1/4 p-6 border-r">
            <h2 class="text-[#163F75] font-semibold text-xl mb-4">Upcoming</h2>
            <div id="event-list" class="space-y-4 overflow-y-auto max-h-[700px] pr-2">
                <!-- Event items will be dynamically inserted here -->
            </div>
        </div>

        <!-- Right: Monthly Calendar -->
        <div class="w-2/3 p-6">
            <div id="calendar-header" class="flex justify-between items-center mb-4">
                <button id="calendar-prev" class="text-sm text-[#163F75] flex items-center gap-1">
                    <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                        <path
                            d="M12.918 4.16536L7.08464 9.9987L12.918 15.832"
                            stroke="#163F75"
                            stroke-width="1.6"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                        />
                    </svg>
                    <span id="calendar-prev-label" class="text-sm"></span>
                </button>

                <h2 id="calendar-title" class="text-xl font-bold text-[#163F75]">Loading...</h2>

                <button id="calendar-next" class="text-sm text-[#163F75] flex items-center gap-1">
                    <span id="calendar-next-label" class="text-sm"></span>
                    <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                        <path
                            d="M7.08203 4.16536L12.9154 9.9987L7.08203 15.832"
                            stroke="#163F75"
                            stroke-width="1.6"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                        />
                    </svg>
                </button>
            </div>
            <div id="calendar-grid" class="grid grid-cols-6 gap-6 p-4 mt-2">
                <!-- Calendar cells will be dynamically generated here -->
            </div>
            <!-- Day Timeline View (initially hidden) -->
            <div id="day-timeline-view" class="hidden">
                <div
                    class="relative border-gray-200"
                    style="min-height: 600px"
                    id="timeline-container"
                >
                    <!-- Time slots and events will be rendered here -->
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const calendarGrid = document.getElementById("calendar-grid");
    const calendarTitle = document.getElementById("calendar-title");
    const calendarPrev = document.getElementById("calendar-prev");
    const calendarNext = document.getElementById("calendar-next");
    const calendarPrevLabel = document.getElementById("calendar-prev-label");
    const calendarNextLabel = document.getElementById("calendar-next-label");
    const timelineView = document.getElementById("day-timeline-view");
    const timesvg = document.getElementById("time-svg");
    const timeHeader = document.getElementById("time-header");
    const getCalendarBack = document.getElementById("back-button");

    let currentDate = new Date();
    let selectedDay = null;
    let viewMode = "month"; // "month" or "day"

    function updateHeader() {
        if (viewMode === "month") {
            calendarTitle.textContent = currentDate.toLocaleString("default", {
                month: "long",
                year: "numeric",
            });

            const prevDate = new Date(currentDate);
            prevDate.setMonth(prevDate.getMonth() - 1);
            calendarPrevLabel.textContent = prevDate.toLocaleString("default", { month: "long" });

            const nextDate = new Date(currentDate);
            nextDate.setMonth(nextDate.getMonth() + 1);
            calendarNextLabel.textContent = nextDate.toLocaleString("default", { month: "long" });

            calendarPrev.onclick = () => {
                currentDate.setMonth(currentDate.getMonth() - 1);
                renderCalendar(currentDate);
            };
            calendarNext.onclick = () => {
                currentDate.setMonth(currentDate.getMonth() + 1);
                renderCalendar(currentDate);
            };
        } else if (viewMode === "day") {
            calendarTitle.textContent = selectedDay.toLocaleDateString("en-US", {
                weekday: "long",
                month: "long",
                day: "numeric",
                year: "numeric",
            });

            calendarPrevLabel.textContent = "Previous";
            calendarNextLabel.textContent = "Next";

            calendarPrev.onclick = () => {
                selectedDay.setDate(selectedDay.getDate() - 1);
                renderDayTimeline();
                updateHeader();
            };
            calendarNext.onclick = () => {
                selectedDay.setDate(selectedDay.getDate() + 1);
                renderDayTimeline();
                updateHeader();
            };
        }
    }

    function renderCalendar(date) {
        const year = date.getFullYear();
        const month = date.getMonth();

        const firstDayOfMonth = new Date(year, month, 1);
        const lastDayOfMonth = new Date(year, month + 1, 0);
        const daysInMonth = lastDayOfMonth.getDate();

        const startDay = firstDayOfMonth.getDay(); // Sunday = 0
        const totalCells = 36;

        calendarGrid.innerHTML = "";

        // Previous month's days
        const prevMonthLastDay = new Date(year, month, 0).getDate();
        for (let i = startDay - 1; i >= 0; i--) {
            const day = prevMonthLastDay - i;
            const prevDayName = new Date(year, month - 1, day).toLocaleString("default", {
                weekday: "short",
            });
            calendarGrid.innerHTML += `
                <div class="w-[118px] h-[82px] border rounded-xl p-2 bg-[#EBF2F7]/40 text-gray-400">
                    <p class="text-xs font-medium">${prevDayName}</p>
                    <p class="text-sm font-semibold">${day}</p>
                </div>`;
        }

        // Current month days
        for (let i = 1; i <= Math.min(daysInMonth, totalCells - startDay); i++) {
            const current = new Date(year, month, i);
            const isToday = current.toDateString() === new Date().toDateString();
            const dayName = current.toLocaleString("default", { weekday: "short" });

            calendarGrid.innerHTML += `
                <div onclick="showDayTimeline('${year}-${String(month + 1).padStart(
                2,
                "0"
            )}-${String(i).padStart(2, "0")}')"
                     class="w-[118px] h-[82px] border rounded-xl p-2 bg-[#EBF2F7] ${
                         isToday ? "ring-2 ring-[#54B7C5] bg-white" : ""
                     } shadow-md cursor-pointer hover:bg-blue-100 transition">
                    <p class="text-xs text-gray-500 font-medium">${dayName}</p>
                    <p class="text-sm font-semibold text-gray-800">${i}</p>
                </div>`;
        }

        // Next month's days
        const renderedCurrent = Math.min(daysInMonth, totalCells - startDay);
        const nextDays = totalCells - (startDay + renderedCurrent);
        for (let i = 1; i <= nextDays; i++) {
            const dayName = new Date(year, month + 1, i).toLocaleString("default", {
                weekday: "short",
            });
            calendarGrid.innerHTML += `
                <div class="w-[125px] h-[87px] border rounded-xl p-2 bg-[#EBF2F7]/40 text-gray-400">
                    <p class="text-xs font-medium">${dayName}</p>
                    <p class="text-sm font-semibold">${i}</p>
                </div>`;
        }

        viewMode = "month";
        calendarGrid.classList.remove("hidden");
        timelineView.classList.add("hidden");
        timeHeader.classList.add("hidden");
        timesvg.classList.add("hidden");
        getCalendarBack.classList.add("hidden");
        updateHeader();
    }

    const events = [
        { date: "2024-02-04", times: ["10:00 - 12:00", "14:00 - 16:00"] },
        { date: "2024-02-06", times: ["15:00 - 16:00"] },
        { date: "2024-02-07", times: ["14:00 - 16:00"] },
        { date: "2024-02-08", times: ["11:00 - 13:00", "13:30 - 16:30", "17:00 - 18:00"] },
        { date: "2024-02-09", times: ["16:00 - 18:00"] },
    ];

    function renderEvents() {
        const container = document.getElementById("event-list");
        container.innerHTML = "";
        events.forEach((event) => {
            const el = document.createElement("div");
            el.className =
                "rounded-lg p-3 border border-transparent bg-[#EBF2F7] text-gray-700 shadow-sm hover:border-[#54B7C5] cursor-pointer transition-all duration-200 text-sm";

            el.innerHTML = `
                <div class="flex items-start justify-between">
                    <div>
                        <p class="text-xs text-gray-500 font-medium">${new Date(
                            event.date
                        ).toLocaleDateString("en-US", { weekday: "short" })}</p>
                        <p class="text-xl font-bold">${new Date(event.date).getDate()}</p>
                    </div>
                </div>
                <div class="mt-2 space-y-1">
                    ${event.times
                        .map(
                            (time) => `
                        <a href="#" class="flex items-center gap-2 text-[#163F75] hover:underline">
                            <img src="<%= process.env.APP_URL_ADMIN %>/Icons/icons/TimeCircle.svg" alt="icon" class="w-4 h-4" />
                            <span>${time}</span>
                        </a>
                    `
                        )
                        .join("")}
                </div>
            `;
            container.appendChild(el);
        });
    }

    renderEvents();

    function showDayTimeline(dateStr) {
        selectedDay = new Date(dateStr);
        viewMode = "day";
        calendarGrid.classList.add("hidden");
        timelineView.classList.remove("hidden");
        timeHeader.classList.remove("hidden");
        timesvg.classList.remove("hidden");
        getCalendarBack.classList.remove("hidden");

        updateHeader();
        renderDayTimeline();
    }

    function goBackToCalendar() {
        viewMode = "month";
        renderCalendar(currentDate);
    }

    function renderDayTimeline() {
        const container = document.getElementById("timeline-container");
        container.innerHTML = "";

        // Sample events
        const events = [
            { date: "2025-05-04", times: ["10:00 - 12:00", "14:00 - 16:00"] },
            { date: "2025-05-06", times: ["15:00 - 16:00"] },
            { date: "2025-05-08", times: ["11:00 - 13:00"] },
            { date: "2025-05-09", times: ["13:30 - 16:30", "17:00 - 18:00"] },
        ];

        const timeSlots = [
            "9 AM",
            "10 AM",
            "11 AM",
            "12 PM",
            "1 PM",
            "2 PM",
            "3 PM",
            "4 PM",
            "5 PM",
        ];

        timeSlots.forEach((slot) => {
            const div = document.createElement("div");
            div.className = "flex items-start border-t h-[60px] mt-4";
            div.innerHTML = `
                <div class="w-[40px] text-right text-xs text-gray-500 mt-[-10px]">${slot}</div>
                <div class="flex-1 h-full"></div>
            `;
            container.appendChild(div);
        });

        const eventData = events.find((e) => e.date === selectedDay.toISOString().split("T")[0]);
        if (eventData) {
            eventData.times.forEach((time) => {
                const [start, end] = time.split(" - ");
                const el = document.createElement("div");
                el.className =
                    "absolute left-[60px] right-4 bg-white border-l-4 border-blue-500 shadow p-1 rounded text-sm";
                el.style.top = `${getEventTop(start)}%`;
                el.style.height = `${getEventHeight(start, end)}%`;
                el.innerHTML = `
                <div class="text-xs text-gray-500">${time}</div>
                <div class="font-medium text-gray-700">Dining Room, Kitchen</div>
                `;
                container.appendChild(el);
            });
        }

        // console.log("Selected Day:", selectedDay.toISOString().split("T")[0]);
        // console.log("Matching Events:", eventData);
    }

    function getEventTop(startTime) {
        const [h, m] = startTime.split(":").map(Number);
        return ((h * 60 + m - 540) / 480) * 90; // offset from 9AM
    }

    function getEventHeight(start, end) {
        const [h1, m1] = start.split(":").map(Number);
        const [h2, m2] = end.split(":").map(Number);
        return ((h2 * 60 + m2 - (h1 * 60 + m1)) / 480) * 100;
    }

    // Init
    renderCalendar(currentDate);

    getCalendarBack.onclick(() => {
        goBackToCalendar();
        renderCalendar(currentDate);
    });
</script>
