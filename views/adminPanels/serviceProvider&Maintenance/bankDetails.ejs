<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Smart Building Services - Auth</title>
        <!-- Tailwind CSS CDN -->
        <script src="https://cdn.tailwindcss.com"></script>

        <!-- Flowbite CSS & JS -->
        <!-- <link href="https://unpkg.com/flowbite@1.6.5/dist/flowbite.min.css" rel="stylesheet" /> -->
        <script src="https://unpkg.com/flowbite@1.6.5/dist/flowbite.min.js"></script>
        <style>
            /* Optional animation */
            @keyframes shake {
                0%,
                100% {
                    transform: translateX(0);
                }
                20%,
                60% {
                    transform: translateX(-5px);
                }
                40%,
                80% {
                    transform: translateX(5px);
                }
            }
            .shake {
                animation: shake 0.5s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
            }
        </style>
    </head>

    <body class="bg-white font-sans min-h-100vh">
        <!-- Decorative Top Image -->
        <div class="relative">
            <img src="../Icons/images/AuthBg.png" alt="Top Decoration" class="w-full" />
        </div>

        <!-- Main Content -->
        <div class="max-w-7xl mx-auto flex items-center justify-between px-8 mt-[-40px] relative">
            <!-- Auth Box -->
            <div class="w-[472px] px-6 transform -translate-x-[230px] -translate-y-[70px]">
                <div id="auth-container">
                    <div class="flex justify-start items-start">
                        <!-- Title -->
                        <h2
                            class="text-2xl items-start justify-start text-center text-black mb-6"
                            id="form-title"
                        >
                            Bank Details
                        </h2>
                    </div>
                    <!-- Admin Profile Form -->
                    <form id="login-form" class="space-y-3">
                        <!-- First Name -->
                        <div
                            class="flex items-center bg-white px-4 py-4 rounded-[10px] border shadow-xl"
                        >
                            <input
                                type="text"
                                placeholder="Account Name"
                                class="w-full h-[14px] text-m focus:outline-none"
                            />
                        </div>
                        <!-- Last Name -->
                        <div
                            class="flex items-center bg-white px-4 py-4 rounded-[10px] border shadow-xl"
                        >
                            <input
                                type="text"
                                placeholder="Account Number"
                                class="w-full h-[14px] text-m focus:outline-none"
                            />
                        </div>
                        <!-- Last Name -->
                        <div
                            class="flex items-center bg-white px-4 py-4 rounded-[10px] border shadow-xl"
                        >
                            <input
                                type="text"
                                placeholder="IBAN"
                                class="w-full h-[14px] text-m focus:outline-none"
                            />
                        </div>
                        <!-- Styled Native Role Select -->
                        <div class="flex bg-white px-4 py-4 rounded-[10px] border shadow-xl">
                            <select
                                name="banks"
                                id="bankname"
                                class="w-full h-[21px] text-m text-gray-400 focus:outline-none"
                                required
                            >
                                <option value="" hidden>Bank Name</option>
                                <option value="">Bank1</option>
                                <option value="">Bank2</option>
                                <option value="">Bank3</option>
                            </select>
                        </div>

                        <!-- Last Name -->
                        <div
                            class="flex items-center bg-white px-4 py-4 rounded-[10px] border shadow-xl"
                        >
                            <input
                                type="text"
                                placeholder="Billing Address"
                                class="w-full h-[23px] text-m focus:outline-none"
                            />
                        </div>

                        <!-- Checkbox and Label -->
                        <label class="flex items-start gap-2 text-sm text-gray-600 leading-snug">
                            <input type="checkbox" class="mt-1 scale-110 accent-[#163f75]" />
                            <p class="text-sm leading-snug">
                                My Billing and Business address are the same
                            </p>
                        </label>
                    </form>
                </div>
            </div>

            <!-- Logo -->
            <div
                class="fixed right-1 text-center top-[600px] transform -translate-x-[250px] -translate-y-[80px]"
            >
                <h2 class="text-5xl text-gray-600">Your bank details are protected</h2>
                <h2 class="text-5xl mt-2 text-gray-600">and encrypted with the highest</h2>
                <h2 class="text-5xl mt-2 text-gray-600">security standards</h2>
            </div>
        </div>

        <!-- Bottom Decorative Image -->
        <div class="fixed bottom-0 left-0 w-full">
            <img src="../Icons/images/CurveBg.svg" alt="Footer Decoration" />
            <div class="absolute bottom-8 left-1/3 transform -translate-x-[490px] font-[600]">
                <h2 class="text-gray-800 text-4xl">
                    Step 3
                    <span class="text-gray-500 text-3xl">Out of 5</span>
                </h2>
            </div>

            <div class="absolute bottom-8 left-1/3 transform -translate-x-[-640px] font-[600]">
                <button
                    onclick="window.location.href=`<%= process.env.APP_ADMIN_URL %>/bussinessdetails`"
                    class="text-xl mr-8 font-medium text-black hover:underline"
                >
                    &lt; Back
                </button>

                <button
                    type="submit"
                    onclick="window.location.href=`<%= process.env.APP_ADMIN_URL %>/chooseplan`"
                    class="bg-[#163f75] text-white text-m rounded-[10px] w-[350px] py-3 hover:bg-[#10294f] transition"
                >
                    Save & Continue
                </button>
            </div>
        </div>
    </body>
    <script>
        let timerInterval;

        const imageUpload = document.getElementById("imageUpload");
        const profilePlaceholder = document.getElementById("profilePlaceholder");

        imageUpload.addEventListener("change", function () {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    profilePlaceholder.innerHTML = `
          <img src="${e.target.result}" alt="Profile" class="w-full h-full object-cover rounded-full" />
        `;
                };
                reader.readAsDataURL(file);
            }
        });
        // For Edit Modal
        const imageUploadEdit = document.getElementById("imageUpload-edit");
        const profilePlaceholderEdit = document.getElementById("profilePlaceholder-edit");

        imageUploadEdit.addEventListener("change", function () {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    profilePlaceholderEdit.innerHTML = `
          <img src="${e.target.result}" alt="Profile" class="w-full h-full object-cover rounded-full" />
        `;
                };
                reader.readAsDataURL(file);
            }
        });

        // For login form
        document.getElementById("loginCountrySelect").addEventListener("change", function () {
            document.getElementById("loginFlagIcon").src = flagMap[this.value];
        });

        // For forgot password form
        document.getElementById("forgotCountrySelect").addEventListener("change", function () {
            document.getElementById("forgotFlagIcon").src = flagMap[this.value];
        });

        function setupOTPInputs() {
            const otpInputs = document.querySelectorAll(".otp-digit");

            otpInputs.forEach((input, index) => {
                input.addEventListener("input", (e) => {
                    let value = e.target.value;

                    // Allow only digits
                    if (!/^\d$/.test(value)) {
                        e.target.value = "";
                        return;
                    }

                    if (index < otpInputs.length - 1) {
                        otpInputs[index + 1].focus();
                    }
                });

                input.addEventListener("keydown", (e) => {
                    if (e.key === "Backspace" && e.target.value === "" && index > 0) {
                        otpInputs[index - 1].focus();
                    }
                });

                // Prevent typing non-digits using keypress
                input.addEventListener("keypress", (e) => {
                    if (!/[0-9]/.test(e.key)) {
                        e.preventDefault();
                    }
                });

                // Optional: Clear input on focus
                input.addEventListener("focus", (e) => {
                    e.target.select(); // highlights the number for easy replacement
                });
            });
        }

        const formTitle = document.getElementById("form-title");

        function showForgotPassword() {
            document.getElementById("login-form").classList.add("hidden");
            document.getElementById("reset-form").classList.add("hidden");
            document.getElementById("forgot-form").classList.remove("hidden");
            formTitle.textContent = "Forgot Password";
        }

        function clearOTPInputs() {
            const otpInputs = document.querySelectorAll(".otp-digit");
            otpInputs.forEach((input) => {
                input.value = "";
                input.classList.remove("border-red-500", "ring-2", "ring-red-200");
            });

            // Also hide error toast if it's still showing
            hideOtpError();

            // Optional: reset "Send OTP Again" label if modal was left open too long
            const timerDisplay = document.getElementById("otp-timer");
            if (timerDisplay.innerText === "Send OTP Again") {
                timerDisplay.innerText = "00:50";
                timerDisplay.classList.remove("text-[#163f75]", "cursor-pointer");
                timerDisplay.classList.add("text-blue-600");
                timerDisplay.onclick = null;
            }
        }

        function showOTPModal() {
            startOTPTimer();
            document.getElementById("otp-modal").classList.remove("hidden");
            setupOTPInputs();
        }

        function closeOTPModal() {
            clearOTPInputs(); // must come before hiding modal
            clearInterval(timerInterval);
            document.getElementById("otp-modal").classList.add("hidden");
        }

        function submitOTP() {
            const otpDigits = document.querySelectorAll(".otp-digit");
            const otp = Array.from(otpDigits)
                .map((digit) => digit.value)
                .join("");

            if (otp.length === 6) {
                window.location.href = `<%= process.env.APP_ADMIN_URL %>/bussinessdetails`;
            } else {
                showOtpError("Please enter all 6 digits of the OTP code");
                // Optionally highlight empty fields
                otpDigits.forEach((digit) => {
                    if (!digit.value) {
                        digit.classList.add("border-red-500", "ring-2", "ring-red-200");
                        digit.addEventListener(
                            "input",
                            function () {
                                this.classList.remove("border-red-500", "ring-2", "ring-red-200");
                            },
                            { once: true }
                        );
                    }
                });
            }
        }

        function showOtpError(message) {
            const toast = document.getElementById("otp-error-toast");
            const messageEl = document.getElementById("otp-error-message");
            messageEl.textContent = message || "Please enter complete 6-digit OTP";
            toast.classList.remove("hidden");
            setTimeout(hideOtpError, 5000); // Auto-hide after 5 seconds
        }

        function hideOtpError() {
            document.getElementById("otp-error-toast").classList.add("hidden");
        }

        function startOTPTimer() {
            const timerDisplay = document.getElementById("otp-timer");
            let timeLeft = 50;

            timerDisplay.classList.remove("cursor-pointer", "text-red-500");
            timerDisplay.classList.add("text-blue-600");
            timerDisplay.innerText = formatTime(timeLeft);

            timerInterval = setInterval(() => {
                timeLeft--;

                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    timerDisplay.innerText = "Send OTP Again";
                    timerDisplay.classList.remove("text-blue-600");
                    timerDisplay.classList.add("text-[#163f75]", "cursor-pointer");
                    timerDisplay.onclick = resendOTP;
                } else {
                    timerDisplay.innerText = formatTime(timeLeft);
                }
            }, 1000);
        }

        function formatTime(seconds) {
            const m = String(Math.floor(seconds / 60)).padStart(2, "0");
            const s = String(seconds % 60).padStart(2, "0");
            return `${m}:${s}`;
        }

        function resendOTP() {
            startOTPTimer();
            const timerDisplay = document.getElementById("otp-timer");
            timerDisplay.onclick = null;
        }
    </script>
</html>
